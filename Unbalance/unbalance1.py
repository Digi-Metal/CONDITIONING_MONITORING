import pylab as pyl
import numpy as np
import scipy as sy
import scipy.fftpack as syfp
from scipy import signal
from scipy.fftpack import fft, ifft
import matplotlib.pyplot as plt
import pandas as pd
import os
from scipy.signal import find_peaks_cwt
import csv
import heapq
from numpy import (array, dot, arccos, clip)
from numpy.linalg import norm

import heapq


yf1=[2.502442697505103e-13, 1.306800718538807, 1.3481325694738469, 1.2379706028582218, 0.7909717342730409, 0.367240068351839, 0.8405065557113766, 0.9126015937123634, 0.39971663285314446, 0.8626602979141605, 1.1984587069849115, 1.9896831059249072, 0.34744579097147316, 1.2895079725011336, 0.426493453251357, 0.23853090099123267, 0.19271404019301966, 0.48864304101199235, 0.4258230345318072, 1.4507510001968766, 0.3587268528520432, 0.9725461897883991, 1.6703634445862772, 0.7467329325063141, 1.6557393780444705, 1.2578532962386622, 1.5942774982346106, 1.3130186399243913, 1.7519473929281582, 0.8367031246066993, 1.105110839561329, 1.2099972912531265, 1.097950717440136, 1.371049010715293, 1.1233228083939997, 2.2236176559376832, 0.21190833346700497, 1.4620963695773923, 1.0296488445668548, 1.6673246005091913, 2.021606304692668, 1.3697332901871702, 1.8074664370943678, 1.4075754343181635, 1.3480543713430841, 1.0143498125844053, 0.7362714730302585, 1.7175148831445923, 1.9022187519372575, 1.4399537189262843, 1.3382297673299233, 1.2701751135463362, 1.3593297928627832, 1.4286701185776634, 1.1476956408418395, 0.8228337186494431, 0.016471326384876632, 2.9978000379277066, 0.623938555276183, 0.4693891378341152, 2.835958219521929, 1.6954429509344089, 1.6965698448108069, 1.0168761533040134, 1.090135463530803, 1.7453992111909036, 0.8248403540859715, 1.469305064146791, 0.9273638296821475, 0.9648945380590793, 1.549335906523434, 1.3599019591916353, 2.285402045109081, 2.2246469080113234, 0.7895706589691305, 2.2075738664535627, 3.498765934211554, 3.555389731045974, 1.6208860796758457, 2.974022996867233, 1.9692167793221482, 3.3947569843881134, 1.6617050698095595, 1.9809212095452335, 2.5278046835367918, 1.261292550192894, 1.354872401065409, 0.42028941359636957, 5.2481031197593735, 2.6280908741302986, 3.48960226149713, 5.027952983864912, 6.09488148372099, 1.1743766852163586, 1.7689820761396058, 2.947178684452803, 1.563503922821544, 0.5936029849060086, 1.9926462009754675, 3.082706343104054, 1.778523970259385, 2.445134840204403, 6.353495972367905, 3.3488219109456723, 5.09367364742621, 1.358976501936724, 1.5596637512406895, 0.9369447333785675, 0.6635847146950257, 1.7477010983449492, 0.5011549487992051, 3.181320081650753, 1.024140250798069, 0.3722105711165149, 4.789885021818837, 3.653281092387736, 3.828247283828311, 2.737243352765144, 0.8207669532343662, 0.6988584476929595, 2.095493137286743, 1.8829715298797196, 2.886173827263523, 1.0232999998871846, 2.8602039253615823, 3.3088698985105274, 1.302101971222079, 1.4022958498083802, 3.3497579733422893, 3.1687268819574177, 1.6266446081737422, 2.2598184707409263, 2.4372524614842925, 0.9756680132782418, 1.7849906178696997, 2.5655469360820975, 3.370745307222036, 1.302574061128518, 0.6289347713502258, 1.7764386865618411, 2.0970057628323207, 1.1748684849507827, 1.0524873124667316, 3.7039272415188256, 0.810133400142496, 1.2044134463098781, 1.9547657281203967, 1.5392809607443745, 0.24751789214969847, 0.5256725024627688, 2.580493556386429, 1.3549764863471887, 3.9473899447051535, 2.1372832063889953, 2.842855078431541, 3.1364182989717935, 1.5197295518526313, 3.7196433300018974, 4.261925533054358, 2.7649587794853145, 1.7089075397606621, 2.0890735184402893, 1.4613269764484442, 0.563973461695654, 3.1445858872616306, 6.860863369496507, 4.646873951885386, 5.743924155632597, 5.098278088069998, 8.107869297502885, 1.9486087038576536, 3.1142388650143005, 1.3443514139359947, 1.8852500973437092, 4.388156436853356, 10.838927952831297, 28.618472836041413, 6.331615995375151, 13.98497868859939, 16.77966144244236, 12.132157725311133, 8.59334032006453, 4.206657705082492, 8.411574520716266, 1.9660006943659396, 2.3187781206557205, 3.159380606559768, 3.0182852272871377, 1.1834757782234226, 1.536920644253916, 3.828208242837589, 5.639098489420822, 3.9367215683337764, 4.539659482632679, 2.453941690360871, 3.711652709028788, 2.1805265460712557, 0.7568972579199444, 2.7340124245911714, 0.2789069213017475, 1.0899370942976652, 1.7245396058053204, 1.8286088448423037, 1.6521852832473687, 3.437525952369437, 4.073388498457297, 3.0467317393010767, 4.662628605798552, 1.5007695907968701, 1.9057979642126743, 2.3623298783042532, 1.428708893383954, 0.593457340144775, 4.7418887045644995, 3.027560928663803, 1.7538472412092931, 0.6394754112848902, 1.9855134663526408, 0.645593544011034, 1.1402576072805644, 1.7567583309974055, 1.9036693427528089, 1.9196536400746986, 1.9265891049071602, 2.311682697098297, 1.742157459605756, 1.8592385117205301, 0.42752886861889233, 2.402388250432468, 1.2604292617769688, 0.9099507512973574, 1.3770297308326478, 1.1763976276341785, 3.214009481282415, 4.121956824245089, 3.633710250164628, 2.2126080779877686, 2.002519443153862, 0.6206483397867474, 1.263981651576645, 0.7643942073517428, 1.8382888872197272, 1.0195985209080847, 0.3404490259828451, 2.092649448753246, 1.2826447918164383, 2.833665751390015, 0.32351179290355575, 1.6784029517494896, 4.1979149018900115, 1.9816150863897797, 0.8631851089942586, 2.275519609929533, 1.702197795854572, 1.1629383996097393, 1.8313022795938723, 4.234534599531962, 3.278079034736914, 2.4349634436248584, 2.360801902979398, 0.927261232638255, 2.6915700766348003, 2.322309831762684, 8.651451082006375, 12.679552233436832, 5.539255362415379, 8.692324247837654, 1.0256060970734882, 7.6526885336521895, 6.0389728880985585, 9.540593580640921, 1.134076762882513, 2.3259317052485486, 2.01036358316532, 3.9325576476071133, 3.9614259530004596, 1.9249130894325506, 1.8714869720625866, 1.8494692887261628, 1.1930594296524564, 3.7433109763977708, 2.4295086017216394, 0.5548188449535746, 4.511695396118579, 1.6857313806620882, 0.753304670334008, 0.48337174474204275, 3.095583989351631, 1.1462560866800873, 0.7083319197743009, 0.8905968194527594, 0.554143952383478, 0.9872132052561109, 3.154604773861176, 3.334564261144679, 1.8663519713855183, 1.4146631573147863, 3.3644899236555412, 1.6195631330300793, 1.6169499097609474, 1.238842798892013, 2.108201226088005, 2.0872054726931144, 1.0800933614945, 2.7991162925393, 0.2865402125058258, 0.684837484942568, 1.2170243904935172, 0.6034771048907629, 1.1518884055374985, 0.7865263623441643, 1.1132224955016259, 1.571197810317074, 1.4467734956907317, 0.8783172548707824, 1.9990037268575254, 1.1657526121950783, 0.8604611579819005, 3.0021790513367153, 1.2548449319309682, 1.1430340470641462, 2.146224270429274, 1.0288579817529482, 2.8547908102275397, 1.4719467564503295, 1.530466299601179, 2.2326997022637545, 1.342443526503685, 0.899091212864591, 1.3912962681914438, 0.8146643737581594, 2.1717131655483697, 1.50595683320694, 0.6650818829224204, 0.6793340342469472, 1.8955254252449794, 0.17886857711393692, 1.5038141998925179, 0.7042932229793817, 0.9164970453702217, 1.1435432617812837, 0.8470417453307213, 0.6128356957605866, 2.4594224831891376, 1.6960541507991478, 0.45719827836966304, 0.46466592492242687, 1.3788069065828081, 2.3688565528374763, 1.595793446728277, 1.417036476973246, 3.6818363100655787, 4.257751723778228, 1.3528563192379768, 2.9195570572557332, 4.212016491936039, 1.2863283038826552, 1.4856111370193432, 1.7014667947951834, 3.9482458595372107, 2.696118160078681, 2.988012186584043, 1.6154497094028388, 1.420056347305899, 1.8880017578067836, 0.26220170728547704, 1.2076858408069904, 1.5582542022507804, 2.3792671348193686, 1.219328527951525, 3.50879921565173, 1.4666253982051927, 1.7919398712892844, 2.9059959042824253, 0.4695914328535298, 1.2835951714599323, 0.7049367188766082, 1.9338040368803446, 2.1932949379118925, 3.3511437729413625, 2.8756699296832284, 0.26368290619172674, 2.7436655680357647, 0.7833116115724178, 1.1852427533044712, 1.467718897133394, 1.7031636627806832, 3.1889616964600216, 0.4281600754110542, 2.4579576100485054, 2.002632234336385, 2.6231766221387818, 1.8273834741236956, 1.3146197553112524, 3.4309551770379247, 2.0280239832268596, 1.0771447566780956, 0.937717486035359, 3.348970485152332, 0.6455621121703558, 1.1057142119890657, 2.340171928746855, 1.0293587574499048, 0.28623455609221576, 2.322037478153268, 0.7798035574575166, 2.867173989087078, 2.4211752033543052, 3.687521527734191, 1.285742399681062, 2.171391478995995, 3.97554360536535, 4.487764269699015, 2.161994521202042, 2.4944509199589877, 4.422699535047184, 2.3666597705579124, 2.174305645860161, 2.8142127584615455, 3.9912543763511503, 5.67438136067002, 3.8842486126875304, 3.4469155167023633, 4.62405316996585, 1.86818742798503, 2.5066468174769567, 2.512762060393017, 5.051704777526719, 3.5158982553075497, 5.736410726664353, 1.585494868925469, 2.8196943622838306, 3.7251321146291043, 4.850375275443356, 0.3206876377466613, 4.124141807354178, 1.8355467348145866, 1.4382816878486038, 1.5907473228084605, 2.7130367745144857, 5.091608757293035, 3.5337780195978077, 2.907803441757973, 0.0035682117543660505, 2.7093874470034347, 0.7916626961568757, 1.3794240765444183, 1.6058566881376946, 4.206281413230849, 1.7151807924002964, 1.2407836167441633, 0.8544793803755324, 1.4873519095878691, 1.453727982356284, 2.057021072464001, 0.9557905240075337, 1.9447107315418783, 0.9343236039188952, 0.7460413566657503, 0.4493254714278603, 0.47105488331436796, 1.0252753627175493, 1.1775241286361886, 1.2973292531140226, 1.526165004240475, 1.0246366518290018, 2.3186628015351465, 0.8794506487048339, 1.8704017960297654, 0.9806386658259361, 0.9148114693664523, 1.7372692566893064, 2.2132183596811466, 0.5704982447824487, 2.849233691266433, 2.5070490121868647, 1.1577250337948248, 0.6631424006754865, 0.6785809007632825, 1.50695795422809, 2.610603651503232, 1.7257233258739713, 1.7556515687001786, 0.49074207584445073, 1.2049543250537584, 0.5622213999190615, 2.2789397493997927, 1.1746083913896106, 0.4549401597621035, 0.9902649257663658, 0.9323792468811942, 1.173869287439511, 0.5563100292384934, 1.5857886842312956, 0.6525037203156953, 0.656368343201209, 0.2264100215643072, 1.2471078363172716, 1.2276453166788803, 2.3783944008719162, 1.6600547585851648, 2.074926743955972, 2.8334172122861587, 1.3859999765737503, 2.087100440100166, 1.5502961204815335, 1.6094192695592073, 0.8902880316994182, 1.777961839553243, 1.8322039164127373, 0.3349788539122466, 0.9977539164748358]
yf2=list(map(int,yf1))

xf1=[0.0, 0.19569471624266144, 0.3913894324853229, 0.5870841487279843, 0.7827788649706457, 0.9784735812133072, 1.1741682974559686, 1.36986301369863, 1.5655577299412915, 1.761252446183953, 1.9569471624266144, 2.152641878669276, 2.3483365949119372, 2.5440313111545985, 2.73972602739726, 2.935420743639922, 3.131115459882583, 3.326810176125244, 3.522504892367906, 3.7181996086105675, 3.9138943248532287, 4.10958904109589, 4.305283757338552, 4.500978473581213, 4.6966731898238745, 4.892367906066536, 5.088062622309197, 5.283757338551859, 5.47945205479452, 5.6751467710371815, 5.870841487279844, 6.066536203522505, 6.262230919765166, 6.457925636007827, 6.653620352250488, 6.8493150684931505, 7.045009784735812, 7.240704500978473, 7.436399217221135, 7.632093933463796, 7.8277886497064575, 8.023483365949119, 8.21917808219178, 8.414872798434441, 8.610567514677104, 8.806262230919765, 9.001956947162427, 9.197651663405088, 9.393346379647749, 9.58904109589041, 9.784735812133071, 9.980430528375733, 10.176125244618394, 10.371819960861057, 10.567514677103718, 10.76320939334638, 10.95890410958904, 11.154598825831702, 11.350293542074363, 11.545988258317024, 11.741682974559687, 11.937377690802348, 12.13307240704501, 12.32876712328767, 12.524461839530332, 12.720156555772993, 12.915851272015654, 13.111545988258316, 13.307240704500977, 13.50293542074364, 13.698630136986301, 13.894324853228962, 14.090019569471623, 14.285714285714285, 14.481409001956946, 14.677103718199607, 14.87279843444227, 15.068493150684931, 15.264187866927593, 15.459882583170254, 15.655577299412915, 15.851272015655576, 16.046966731898237, 16.2426614481409, 16.43835616438356, 16.634050880626223, 16.829745596868882, 17.025440313111545, 17.22113502935421, 17.416829745596868, 17.61252446183953, 17.80821917808219, 18.003913894324853, 18.199608610567513, 18.395303326810176, 18.590998043052835, 18.786692759295498, 18.98238747553816, 19.17808219178082, 19.373776908023483, 19.569471624266143, 19.765166340508806, 19.960861056751465, 20.15655577299413, 20.352250489236788, 20.54794520547945, 20.743639921722114, 20.939334637964773, 21.135029354207436, 21.330724070450096, 21.52641878669276, 21.722113502935418, 21.91780821917808, 22.113502935420744, 22.309197651663403, 22.504892367906066, 22.700587084148726, 22.89628180039139, 23.09197651663405, 23.28767123287671, 23.483365949119374, 23.679060665362034, 23.874755381604697, 24.070450097847356, 24.26614481409002, 24.46183953033268, 24.65753424657534, 24.853228962818, 25.048923679060664, 25.244618395303327, 25.440313111545986, 25.63600782778865, 25.83170254403131, 26.027397260273972, 26.22309197651663, 26.418786692759294, 26.614481409001954, 26.810176125244617, 27.00587084148728, 27.20156555772994, 27.397260273972602, 27.59295499021526, 27.788649706457925, 27.984344422700584, 28.180039138943247, 28.37573385518591, 28.57142857142857, 28.767123287671232, 28.962818003913892, 29.158512720156555, 29.354207436399214, 29.549902152641877, 29.74559686888454, 29.9412915851272, 30.136986301369863, 30.332681017612522, 30.528375733855185, 30.724070450097845, 30.919765166340508, 31.115459882583167, 31.31115459882583, 31.506849315068493, 31.702544031311152, 31.898238747553815, 32.093933463796475, 32.28962818003914, 32.4853228962818, 32.68101761252446, 32.87671232876712, 33.07240704500978, 33.268101761252446, 33.46379647749511, 33.659491193737765, 33.85518590998043, 34.05088062622309, 34.24657534246575, 34.44227005870842, 34.63796477495107, 34.833659491193735, 35.0293542074364, 35.22504892367906, 35.42074363992172, 35.61643835616438, 35.81213307240704, 36.007827788649706, 36.20352250489237, 36.399217221135025, 36.59491193737769, 36.79060665362035, 36.986301369863014, 37.18199608610567, 37.37769080234833, 37.573385518590996, 37.76908023483366, 37.96477495107632, 38.16046966731898, 38.35616438356164, 38.551859099804304, 38.74755381604697, 38.94324853228962, 39.138943248532286, 39.33463796477495, 39.53033268101761, 39.726027397260275, 39.92172211350293, 40.11741682974559, 40.31311154598826, 40.50880626223092, 40.704500978473575, 40.90019569471624, 41.0958904109589, 41.291585127201564, 41.48727984344423, 41.68297455968688, 41.878669275929546, 42.07436399217221, 42.27005870841487, 42.465753424657535, 42.66144814090019, 42.857142857142854, 43.05283757338552, 43.24853228962818, 43.444227005870836, 43.6399217221135, 43.83561643835616, 44.031311154598825, 44.22700587084149, 44.422700587084144, 44.61839530332681, 44.81409001956947, 45.00978473581213, 45.20547945205479, 45.40117416829745, 45.596868884540115, 45.79256360078278, 45.98825831702544, 46.1839530332681, 46.37964774951076, 46.57534246575342, 46.771037181996086, 46.96673189823875, 47.162426614481404, 47.35812133072407, 47.55381604696673, 47.74951076320939, 47.94520547945205, 48.14090019569471, 48.336594911937375, 48.53228962818004, 48.7279843444227, 48.92367906066536, 49.11937377690802, 49.31506849315068, 49.510763209393346, 49.706457925636, 49.902152641878665, 50.09784735812133, 50.29354207436399, 50.489236790606654, 50.68493150684931, 50.88062622309197, 51.076320939334636, 51.2720156555773, 51.467710371819955, 51.66340508806262, 51.85909980430528, 52.054794520547944, 52.25048923679061, 52.44618395303326, 52.641878669275926, 52.83757338551859, 53.03326810176125, 53.22896281800391, 53.42465753424657, 53.62035225048923, 53.816046966731896, 54.01174168297456, 54.207436399217215, 54.40313111545988, 54.59882583170254, 54.794520547945204, 54.99021526418787, 55.18590998043052, 55.381604696673186, 55.57729941291585, 55.77299412915851, 55.96868884540117, 56.16438356164383, 56.360078277886494, 56.55577299412916, 56.75146771037182, 56.947162426614476, 57.14285714285714, 57.3385518590998, 57.534246575342465, 57.72994129158512, 57.925636007827784, 58.12133072407045, 58.31702544031311, 58.51272015655577, 58.70841487279843, 58.90410958904109, 59.099804305283755, 59.29549902152642, 59.49119373776908, 59.686888454011736, 59.8825831702544, 60.07827788649706, 60.273972602739725, 60.46966731898238, 60.665362035225044, 60.86105675146771, 61.05675146771037, 61.25244618395303, 61.44814090019569, 61.64383561643835, 61.839530332681015, 62.03522504892368, 62.230919765166334, 62.426614481409, 62.62230919765166, 62.81800391389432, 63.013698630136986, 63.20939334637964, 63.405088062622305, 63.60078277886497, 63.79647749510763, 63.99217221135029, 64.18786692759295, 64.38356164383562, 64.57925636007828, 64.77495107632093, 64.9706457925636, 65.16634050880626, 65.36203522504891, 65.55772994129158, 65.75342465753424, 65.94911937377691, 66.14481409001957, 66.34050880626222, 66.53620352250489, 66.73189823874755, 66.92759295499022, 67.12328767123287, 67.31898238747553, 67.5146771037182, 67.71037181996086, 67.90606653620353, 68.10176125244618, 68.29745596868884, 68.4931506849315, 68.68884540117416, 68.88454011741683, 69.08023483365949, 69.27592954990214, 69.47162426614481, 69.66731898238747, 69.86301369863013, 70.0587084148728, 70.25440313111545, 70.45009784735812, 70.64579256360078, 70.84148727984343, 71.0371819960861, 71.23287671232876, 71.42857142857143, 71.62426614481409, 71.81996086105674, 72.01565557729941, 72.21135029354207, 72.40704500978474, 72.6027397260274, 72.79843444227005, 72.99412915851272, 73.18982387475538, 73.38551859099803, 73.5812133072407, 73.77690802348336, 73.97260273972603, 74.16829745596868, 74.36399217221134, 74.55968688845401, 74.75538160469667, 74.95107632093934, 75.14677103718199, 75.34246575342465, 75.53816046966732, 75.73385518590997, 75.92954990215264, 76.1252446183953, 76.32093933463796, 76.51663405088063, 76.71232876712328, 76.90802348336595, 77.10371819960861, 77.29941291585126, 77.49510763209393, 77.69080234833659, 77.88649706457925, 78.08219178082192, 78.27788649706457, 78.47358121330724, 78.6692759295499, 78.86497064579255, 79.06066536203522, 79.25636007827788, 79.45205479452055, 79.6477495107632, 79.84344422700586, 80.03913894324853, 80.23483365949119, 80.43052837573386, 80.62622309197651, 80.82191780821917, 81.01761252446184, 81.2133072407045, 81.40900195694715, 81.60469667318982, 81.80039138943248, 81.99608610567515, 82.1917808219178, 82.38747553816046, 82.58317025440313, 82.77886497064578, 82.97455968688845, 83.17025440313111, 83.36594911937377, 83.56164383561644, 83.75733855185909, 83.95303326810176, 84.14872798434442, 84.34442270058707, 84.54011741682974, 84.7358121330724, 84.93150684931507, 85.12720156555773, 85.32289628180038, 85.51859099804305, 85.71428571428571, 85.90998043052836, 86.10567514677103, 86.30136986301369, 86.49706457925636, 86.69275929549902, 86.88845401174167, 87.08414872798434, 87.279843444227, 87.47553816046967, 87.67123287671232, 87.86692759295498, 88.06262230919765, 88.2583170254403, 88.45401174168298, 88.64970645792563, 88.84540117416829, 89.04109589041096, 89.23679060665361, 89.43248532289628, 89.62818003913894, 89.8238747553816, 90.01956947162427, 90.21526418786692, 90.41095890410958, 90.60665362035225, 90.8023483365949, 90.99804305283757, 91.19373776908023, 91.38943248532289, 91.58512720156556, 91.78082191780821, 91.97651663405088, 92.17221135029354, 92.3679060665362, 92.56360078277886, 92.75929549902152, 92.95499021526419, 93.15068493150685, 93.3463796477495, 93.54207436399217, 93.73776908023483, 93.9334637964775, 94.12915851272015, 94.32485322896281, 94.52054794520548, 94.71624266144813, 94.91193737769079, 95.10763209393346, 95.30332681017612, 95.49902152641879, 95.69471624266144, 95.8904109589041, 96.08610567514677, 96.28180039138942, 96.4774951076321, 96.67318982387475, 96.8688845401174, 97.06457925636008, 97.26027397260273, 97.4559686888454, 97.65166340508806, 97.84735812133071, 98.04305283757338, 98.23874755381604, 98.4344422700587, 98.63013698630137, 98.82583170254402, 99.02152641878669, 99.21722113502935, 99.412915851272, 99.60861056751467, 99.80430528375733, 100.0]
xf2=list(map(int,xf1))

largeyf=heapq.nlargest(8,yf2)

indexoflargeyf=[yf2.index(i) for i in largeyf]

hh=[xf2[k] for k in indexoflargeyf]


def xfcorrestoyf(listx1,listy2):
	listx3=list(map(int,listx1))
	listy4=list(map(int,listy2))
	largeinyf=heapq.nlargest(50,listy4)
	indexoflargeyf=[listy4.index(i) for i in largeinyf]
	indexofxfcorrestoyf=[listx3[j] for j in indexoflargeyf]
	print(indexofxfcorrestoyf)
	return indexofxfcorrestoyf
# hhff=xfcorrestoyf(xf1,yf1)

def angleis(df1,df2):
	try:
		v1=df1['v']
		v2=df2['v']
		c = dot(v1,v2)/norm(v1)/norm(v2)
		angle = arccos(clip(c, -1, 1)) 
		print((angle*360)/(2*3.14))
		return (angle*360)/(2*3.14)
	except:
		return 'dimension error'

#Check for multiple harmonics like 30 60 in 1st list if it is then it is not unbalance 
# print 'misalignment can be suspected'
# non synchronus harmonics like 30 51 40 present then unbalance due to 51 and 40 
# print 'unbalance of nearby machine can be suspected'
# 4 vanes are there 

# for i in a:
# 	for j in range((i*2)+2,(i*2)-2):
# 		if j in a:
# 			print(j)
# j=i*2
# k=range((i*2)+2,(i*2)-2)
# cc=[]
# for i in a:
# 	for j in a:
# 	# if range((i*2)-2,(i*2)+3) in a:
# 		if j*2 in a:
# 			print((i*2)-2,(i*2)+3)
	
# bb=range((16*2)-2,(16*2)+3)
# print(bb)
# for i in bb:
# 	print(i)



# def multiples(a):
# 	for i in a:
# 		if range((i*2)-2,(i*2)+3) and range((i*3)-2,(i*3)+3) in a:
# 			print()

# i=0
# while i<len(a):
# 	print(a[i])
# 	i=i+1

# ggg=[i for i in a if range((i*2)-2,(i*2)+3) in a]
# print(ggg)
# import itertools
a=[31,32,33,34,35,16,48,64]     
k=1
for i in range(len(a)):    #littlebit working
	# print(a[i)
	for j in range(i+1,len(a)):
		# print(a[i],a[j])
		if a[i] in range((a[j]*k)-2,(a[j]*k)+3):#print(a[i],a[j])
			# print(a[i])
			k+=1
# d=31
# aaaa=range((16*2)-2,(16*2)+3)
# if d in aaaa:
# 	print(d)

# def multiple_recur(n):
# 	if n==[]:
# 		return 0
# 	else:
# 		k=1
# 		for i in range(len(n)):
# 			for j in range(i+1,len(n)):
# 				if a[i] in range((a[j]*k)-2,(a[j]*k)+3):
# 					return multiple_recur(a[i])
# 					print(multiple_recur(a[i]))
# 					k+=1
# aa=multiple_recur(a)
# def listSum(ls, result):
# 	if not ls:
# 		return result
# 	a=listSum(ls[1:], result + ls[0])
# 	return a
# 	# print(listSum(ls[1:], result + ls[0]))

# aaaa=[6,4,5,3,2,4]
# fg=listSum(aaaa,13)
# print(fg)
# working
a=[ 5, 5, 40, 40, 34, 32, 32,68]
k=1
kk=[]
for i in a:
	for j in a:
		# print(i,j)
		if j in range((i*k)-2,(i*k)+2):
			# print(j)
			kk.append(j)
			k+=1
# print(kk)

#restrict this program to calculate only multiples of 2 or 3 becuae that is enough if 5 
#will be there your program fails, 2 to 3 multiples are enough to consider.

def multiples(listis):
	k=1
	multiplevalues=[]
	for i in listis:
		for j in listis:
	
			if j in range((i*k)-2,(i*k)+3):
				multiplevalues.append(j)
				k+=1
	if multiplevalues==[]:
		return None
	return multiplevalues
# aaaaa=multiples(a)
# print(aaaaa)
# IF PEAK OF 1X RPM RANGES FROM 0.8X TO 1.2X THEN IT IS CONFIRM FOR UNBALANCE

# def limitfrequencyband(rpm):
# 	if runningrpm==rpm:
# 		if peakrpm in range(0.8*rpm,1.2*rpm):
# 			for i in 10peakslist:
				# if 10peakslist[0] in range(0.8*rpm,1.2*rpm):
# 				print('unbalance')
					# also check whether multiple harmonics of rpm in every list
					#if multiple harmonics are there then it is not unbalance.
df1 =pd.read_excel(r'D:\Vegam_all_csv_files_sensor_data\Dynaspede_all_data\Unbalance\2.50_2.58_x8A4_.xlsx')
df2 =pd.read_excel(r'D:\Vegam_all_csv_files_sensor_data\Dynaspede_all_data\Unbalance\2.50_2.58_y8A4_.xlsx')
df3 =pd.read_excel(r'D:\Vegam_all_csv_files_sensor_data\Dynaspede_all_data\Unbalance\2.50_2.58_z8A4_.xlsx')

v1=df1['v']
v2=df2['v']
v3=df3['v']


v1=df1['v']
v2=df2['v']
c = dot(v1,v2)/norm(v1)/norm(v2)
angle = arccos(clip(c, -1, 1)) 
angle=((angle*360)/(2*3.14))
print(angle)
# df=df.dropna()
windowsize=1
windowsize1=1024
samplewindow=1024
howmanywindows=8

for row in range(0,len(df1),samplewindow):
    df2=df1.loc[windowsize:windowsize1]
    Fs = 200.0
    T = 1 / Fs
    v = df1['v']
    N = len(v)
    z = signal.detrend(v)
    yf=fft(z)
    yf=abs(yf[0:N // 2])
    xf = np.linspace(0.0, 1.0 / (2.0 * T), N // 2)
    # dd=xfcorrestoyf(xf,yf)
    # ee=multiples(dd)
    # plt.plot(xf,yf)
    # plt.show()
    windowsize+=samplewindow
    windowsize1+=samplewindow

# ASSUMING V1 HORIZONTAL V2 VERTICAL AND V3 AXIAL

def xfcorrestoyfhorizontal(listx1,listy2):
	listx3=list(map(int,listx1))
	listy4=list(map(int,listy2))
	largeinyf=heapq.nlargest(15,listy4)
	indexoflargeyf=[listy4.index(i) for i in largeinyf]
	indexofxfcorrestoyf=[listx3[j] for j in indexoflargeyf]
	print(indexofxfcorrestoyf)
	return indexofxfcorrestoyf

def xfcorrestoyfvertical(listx1,listy2):
	listx3=list(map(int,listx1))
	listy4=list(map(int,listy2))
	largeinyf=heapq.nlargest(15,listy4)
	indexoflargeyf=[listy4.index(i) for i in largeinyf]
	indexofxfcorrestoyf=[listx3[j] for j in indexoflargeyf]
	print(indexofxfcorrestoyf)
	return indexofxfcorrestoyf	
def xfcorrestoyfaxial(listx1,listy2):
	listx3=list(map(int,listx1))
	listy4=list(map(int,listy2))
	largeinyf=heapq.nlargest(15,listy4)
	indexoflargeyf=[listy4.index(i) for i in largeinyf]
	indexofxfcorrestoyf=[listx3[j] for j in indexoflargeyf]
	print(indexofxfcorrestoyf)
	return indexofxfcorrestoyf

def multiples(listis,rpm):
	k=1
	multiplevalues=[]
	for i in listis:
		for j in listis:
			if j in range((i*k)-2,(i*k)+3) and j in range(rpm-5,rpm+5):
				multiplevalues.append(j)
				k+=1
	if multiplevalues==[]:
		return None
	return multiplevalues

listis1=[48, 24, 24, 24, 25, 25, 25,26, 26, 26, 26, 26, 51, 51, 51, 51, 51, 51, 51, 51,20,60,80]

rpm=1200  #####for each window you need to calculate running rpm and on and off also####
k=rpm//60
# print(type(k))
# l=range(0.8,5.2)
# for i i
# print(l)
# print(l)
limit_start1=int(0.8*k)
limit_end1=int(1.2*(k+1))
limit_start2=int(2*k)
limit_end2=int(2*k)
limit_start3=int(3*k)
limit_end3=int(3*k)
limit_start4=int(4*k)
limit_end4=int(4*k)
peaks=[]
for i in listis1:
	if i in range(limit_start1,limit_end1):
		peaks.append(i)
peaks.sort()
estimate_running_speed=peaks[0]



start_angle=int(90-30)
end_angle=int(90+30)


multiplevalues=[]
for i in listis1:
	if i in range(limit_start2-2,limit_end2+3) or i in range(limit_start3-2,limit_end3+3) or i in range(limit_start4-2,limit_end4+3):
		multiplevalues.append(i)
if multiplevalues!=[]:
		# print('Check Misalignment and Looseness, multiple harmonics are there',multiplevalues)
		# print('multipel',multiplevalues)
		# if multiplevalues:
	print('No unbalance check Misalignment and Looseness')
		
elif i in range(limit_start1,limit_end1) and int(angle) in range(start_angle,end_angle):
			print("Unbalance is there and phase angle is",angle)
			

def multiplevalues(fftlist,runningrpmperwindow):  #FFTLIST CONTAINS PEAK FREQUENCY VALUES CORRESPONDING TO 
	rpm=int(runningrpmperwindow//60)              #AMPLITUDE, runningrpmperwindow IT MIGHT OR MIGHT NOT 
	limit_start1=int(0.8*rpm)                     #CHANGE WITH RESPECT TO WINDOW BASED ON LOAD.
	limit_end1=int(1.2*(rpm+1))
	limit_start2=int(2*rpm)
	limit_end2=int(2*rpm)
	limit_start3=int(3*rpm)
	limit_end3=int(3*rpm)
	limit_start4=int(4*rpm)
	limit_end4=int(4*rpm)
	multiplevaLS=[i for i in fftlist if i in range(limit_start2-2,limit_end2+3) or i in range(limit_start3-2,limit_end3+3) or i in range(limit_start4-2,limit_end4+3)]
	return multiplevaLS

###############for phase angle making dimensions equal###########
# dff=pd.read_excel(r'D:\Vegam_all_csv_files\Dynaspede_misalignment_all_data\Dynaspede_misalignment\finding_phaseshift_test\9.25.10.11.Y_90B.xls')
# dff1=pd.read_excel(r'D:\Vegam_all_csv_files\Dynaspede_misalignment_all_data\Dynaspede_misalignment\finding_phaseshift_test\8A4_y_17.07_17.10.xls')
# print((dff.shape[0])) #to print no of rows present in dataframe
############PENDING WORK
#############while finding phase ANGLE FROM MQTT DATA YOU NEED TO CHECK WHETHER BOTH AXES DATA'S COUNT IS SAME
#############IF NOT REMOVE DATA TO MAKE THEIR SIZE SAME##########

def unbalance():
	multiplevalues=[]
	for i in listis1:
		if i in range(limit_start2-2,limit_end2+3) or i in range(limit_start3-2,limit_end3+3) or i in range(limit_start4-2,limit_end4+3):
			multiplevalues.append(i)
	if multiplevalues!=[]:
		print('No unbalance check Misalignment and Looseness')
	elif i in range(limit_start1,limit_end1) and int(angle) in range(start_angle,end_angle):
		print("Unbalance is there and phase angle is",angle)

rpm=int(rpm/60)
limit1=int(0.5*rpm)
limit2=int(1.2*rpm)
# rpmis=[int(j) for j in indexofxfcorrestoyf if j in range(limit1,(limit2+1))]
# print(rpmis)

if float(8.7) in list(np.arange(round(float(7),2),round(float(10),2),0.1)):
	print('yes')
import math as m
print(m.ceil(6.1))

print(round(float(7),2))