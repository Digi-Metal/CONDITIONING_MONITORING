import numpy as np



###########ASSUMING THAT VELOCITY SEVERITY HAS CROSSED######

##########CHECKING FFT#########FOR HORIZONTAL AND VERTICAL AXES#####
 
##########GETTING 10-15 PEAKS FREQUENCY VALUES CORRESPONDING TO AMPLITUDE#######
#########FFTLIST CONTAINS PEAK FREQUENCY VALUES CORRESPONDING TO #AMPLITUDE, 
#######runningrpmperwindow IT MIGHT OR MIGHT NOT  #CHANGE WITH RESPECT TO WINDOW BASED ON LOAD.
def xfcorrestoyf(listx1,listy2):
	listx3=list(map(int,listx1))
	listy4=list(map(int,listy2))
	largeinyf=heapq.nlargest(15,listy4)
	indexoflargeyf=[listy4.index(i) for i in largeinyf]
	frequencyofxfcorrestoyf=[listx3[j] for j in indexoflargeyf]
	print(frequencyofxfcorrestoyf)
	print(indexoflargeyf)
	return frequencyofxfcorrestoyf

#CHANGE WITH RESPECT TO WINDOW BASED ON LOAD.

############PENDING WORK
#############while finding phase ANGLE FROM MQTT DATA YOU NEED TO CHECK WHETHER BOTH AXES DATA'S COUNT IS SAME
#############IF NOT REMOVE DATA TO MAKE THEIR SIZE SAME##########
###############GET RADIAL ACCELEROMETER DATA FROM MQTT#########
########DF1-HORIZONTAL DF2-VERTICAL#########

###############CHECKING FOR BOTH RADIAL AND VERTICAL###########
def unbalance(frequencyofxfcorrestoyf,angle,rpm):
	rpm=int(runningrpmperwindow//60)              #AMPLITUDE, runningrpmperwindow IT MIGHT OR MIGHT NOT 
	limit_start1=int(0.8*rpm)                     #CHANGE WITH RESPECT TO WINDOW BASED ON LOAD.
	limit_end1=int(1.2*(rpm+1))
	limit_start2=int(1.2*rpm)
	limit_end2=int(2.2*rpm)
	limit_start3=int(2.2*rpm)
	limit_end3=int(3.2*rpm)
	limit_start4=int(3.2*rpm)
	limit_end4=int(4.2*rpm)
	start_angle=int(90-30)
	end_angle=int(90+30)
	multiplevalues=[]
	for i in frequencyofxfcorrestoyf:
		if i in range(limit_start2-2,limit_end2+3) or i in range(limit_start3-2,limit_end3+3) or i in range(limit_start4-2,limit_end4+3):
			multiplevalues.append(i)
	if multiplevalues!=[]:
		print('No unbalance check Misalignment and Looseness') #goto misalignment code
	elif i in range(limit_start1,limit_end1) and int(angle) in range(start_angle,end_angle):
		print("Unbalance is there and phase angle is",angle)

##########IF MOTOR IS OFF THEN VALUES WILL BE ZERO IN LIST #########
########mention axes horizontal
def angleis(filename1,filename2):
	filename1 =pd.read_excel(r'D:\Vegam_all_csv_files\Dynaspede_all_data\Unbalance\478_x_2.50_3.xls')
	filename2 =pd.read_excel(r'D:\Vegam_all_csv_files\Dynaspede_all_data\Unbalance\478_z_2.50_3.xls')  #Reading csv files
	filename1 = filename1.dropna()  

	vibration1= filename1 ['v']    #taking vibration column
	vibration2= filename2 ['v']

	Inner_product = dot(vibration1, vibration2)/norm(vibration1)/norm(vibration2)    #calculating the inner product.


	angle = arccos(clip(Inner_product, -1, 1))  #angle in radina
	angledegree = (angle*360)/(2*3.14)
	print(angledegree)
import math as m

Slevel = 7
def unbalance1(frequencyofxfcorrestoyf,angle,runningrpmperwindow):
	rpm=int(runningrpmperwindow//60)              #AMPLITUDE, runningrpmperwindow IT MIGHT OR MIGHT NOT 
	vel_severityis = (Vel_severity)
	vel_alaram_start11 = (7)
	vel_alaram_end = (10)
	vel_alaram2 = (10)
	limit_start1=int(0.8*rpm)                     #CHANGE WITH RESPECT TO WINDOW BASED ON LOAD.
	limit_end1=int(1.2*(rpm+1))
	limit_start2=int(1.8*rpm)
	limit_end2=int(2.2*rpm)
	limit_start3=int(2.2*rpm)
	limit_end3=int(3.2*rpm)
	limit_start4=int(3.2*rpm)
	limit_end4=int(4.2*rpm)
	start_angle=int(90-30)
	end_angle=int(90+30)
	multiplevalues=[]
	for i in frequencyofxfcorrestoyf:
		if i in range(limit_start2+1,limit_end2) or i in range(limit_start3,limit_end3) or i in range(limit_start4,limit_end4) :
			multiplevalues.append(i)
	if multiplevalues!=[]:
		print(multiplevalues)
		print('No unbalance check Misalignment and Looseness') #goto misalignment code
	elif i in range(limit_start1,limit_end1) and start_angle <= (angle) <= end_angle  and vel_alaram_start11 <= vel_severityis <vel_alaram_end :
		print("Unbalance is there and phase angle is",angle)
	


def unbalance2(frequencyofxfcorrestoyf,angle,runningrpmperwindow,Vel_severity):
	rpm=int(runningrpmperwindow//60)              #AMPLITUDE, runningrpmperwindow IT MIGHT OR MIGHT NOT 
	vel_severityis = Vel_severity
	vel_alaram_start = (7)
	# vel_alaram_end = (10)
	# vel_alaram2 = (10)
	limit_start1=int(0.8*rpm)                     #CHANGE WITH RESPECT TO WINDOW BASED ON LOAD.
	limit_end1=int(1.2*(rpm+1))
	limit_start2=int(1.3*rpm)
	limit_end2=int(2.2*rpm)
	limit_start3=int(2.2*rpm)
	limit_end3=int(3.2*rpm)
	limit_start4=int(3.2*rpm)
	limit_end4=int(4.2*rpm)
	start_angle=int(90-30)
	end_angle=int(90+30)
	start_angle2=int(180-30)
	end_angle2=int(180+30)
	multiplevalues=[]
	for i in frequencyofxfcorrestoyf:
		if i in range(limit_start1,limit_end1) and start_angle <= (angle) <= end_angle and   vel_severityis == 'unsatisfactory' or vel_severityis == 'unacceptable' :
			print("Unbalance is there and phase angle is",angle)
			multiplevalues.append(1)
			return 1
			break
		elif i in range(limit_start2,limit_end2) or i in range(limit_start3,limit_end3) or i in range(limit_start4,limit_end4)  :
			print('No unbalance check Misalignment and Looseness') #goto misalignment code
			multiplevalues.append(0)
			return 0
		return multiplevalues
	print('result is',multiplevalues)
		
rpm =1200
angle = 20
Vel_severity = 7
lsi1 = [16,17,18,20,23,24,40]
lsi2 = [16,17,18,20,23,24]
lsi3 = [16,17,18,20,23,24]
Vel_severity1 = 'unsatisfactory'
Vel_severity2 = 'unsatisfactory'
Vel_severity3 = 'unsatisfactory'
angle = 23
# print(unbalance2(lsi1,angle,rpm,Vel_severity))

def threeaxescomparison(horizontal,vertical,axial,severityX,severityY,severityZ,angle,rpmX,rpmY,rpmZ):
	horizontallist = unbalance2(horizontal,angle,rpmX,severityX)
	vertical =       unbalance2(vertical,angle,rpmY,severityY)
	axial =          unbalance2(axial,angle,rpmZ,severityZ)
	if horizontal == 1 or vertical == 1 or axial == 1:
		print('Yes')
	else:
		print('No')
import numpy as np
import matplotlib.pyplot as plt
def unbalance4(fft_list,sampling_frequency,rpm,angle,Vel_severity):
	N = sampling_frequency
	T = 1/N
	rpm = rpm//60               #to frequency
	limit_start1=int(0.8*rpm)            #CHANGE WITH RESPECT TO WINDOW BASED ON LOAD.
	limit_end1=int(1.2*(rpm))
	vel_severityis = Vel_severity
	averaged_fft = fft_list
	start_angle=int(90-30)
	end_angle=int(90+30)
	yf=abs(np.array(averaged_fft)[0:N // 2])
	xf = np.linspace(0.0, 1.0 / (2.0 * T), N // 2)
	rms_fft_amplitude = np.sqrt(np.mean(np.square(yf)))
	print(rms_fft_amplitude)
	above_rms_ampl = [list(yf).index(i) for i in yf if i>rms_fft_amplitude]
	above_rms_ampl_X_values = [i for i in yf if i>rms_fft_amplitude]
	# print('ammmmm values',above_rms_ampl_X_values)
	frequencycorrestoaboveamp = [list(xf)[j] for j in above_rms_ampl]
	# print(frequencycorrestoaboveamp)
	if vel_severityis == 'unsatisfactory' or vel_severityis == 'unacceptable':
		if  start_angle<= angle <=end_angle:
			print(start_angle,angle,end_angle)
			onexrangevalues = [i for i in frequencycorrestoaboveamp if limit_start1<= i <=limit_end1]
			# print('onexrangevalues',onexrangevalues)
			if onexrangevalues == []:
				print('check for other faults')
			else:
				onexrpmvalue = float(np.mean(onexrangevalues))
			multixvalues = [i for i in frequencycorrestoaboveamp if ((onexrpmvalue*2)-2)<= i <= ((onexrpmvalue*2)+2) or ((onexrpmvalue*3)-2)<= i <= ((onexrpmvalue*3)+2)]
			print('multiple values',multixvalues)
			if multixvalues == []:
				print('Unbalance')
			else:
				print('Check for misalignment')
		else:	
			print('Check for other')
	else:
		print('check other')	



Vel_severity1 = 'unsatisfactory'
Vel_severity2 = 'unsatisfactory'
Vel_severity3 = 'unsatisfactory'
angle = 23
runningrpmperwindow =1200


fft_list = [5.303637970598156e-19, 0.000458042508850361, 0.00019599864551870535, 0.0005758541411883235, 0.0006827277550880641, 0.000297327201900647, 0.0003590277324217728, 0.000710306365403419, 0.0005456518504168466, 0.00037206980896960343, 0.0005478866227923835, 0.0007072984519108319, 0.0005021321587022936, 0.0005232801249225244, 0.0006192421345391344, 0.0005773754080013261, 0.0007058211027481748, 0.0006184108544161647, 0.0005744536045601311, 0.0006263430741593449, 0.0008391687629274228, 0.0004889227513756465, 0.00033841660699898425, 0.0008899642107082511, 0.0008114117225888959, 0.00020801352378728799, 0.0005643674987031655, 0.000886710181665695, 0.0005580423233231992, 0.00011790622117716195, 0.000626820991170939, 0.0006690778715490924, 0.0003115287326734371, 0.00027558205433236865, 0.0004801369098211824, 0.0003681747550765335, 0.00021064777149417115, 0.0002195139564856604, 0.00019984205931434235, 0.00011723058201817321, 5.8318160948628956e-05, 7.61251854879435e-05, 6.0221797623489445e-05, 0.00020189377536846803, 0.0002444530530055835, 0.0001703764617896103, 0.00030288698210934804, 0.00044736179754202853, 0.0003069340083853662, 0.00018829353195917717, 0.0005224865934154427, 0.0006211101589166014, 0.0001887213649401006, 0.0004000649779717633, 0.0006722696030859808, 0.0005219372163764679, 0.00016355623364379483, 0.0005991473336289782, 0.0006184258288722435, 0.00028256934741730135, 0.0003053834868235332, 0.0005022464720987143, 0.00040611053387970634, 0.0002507299236139522, 0.00028238216234510396, 0.0003156312931328081, 0.00020525962838029065, 0.0001871731410474033, 0.00018794368072460975, 0.0001465932916238661, 7.978807109578706e-05, 0.00015739668885481715, 7.639099915084163e-05, 0.00022675321036968776, 0.0003547403057093388, 0.00025131227023637403, 0.00015070445147097179, 0.0004627375156679865, 0.0005126981303247978, 0.00019939175454821144, 0.00038251477022410225, 0.0006534447697263046, 0.0005098788138949522, 0.00017823592179271817, 0.0005535360331172893, 0.0006481159097858756, 0.0003094653611876503, 0.0002741487234196896, 0.0005501944250115013, 0.00042915126400669797, 0.00023921553400512517, 0.0003052238423572979, 0.00041340157361436183, 0.00029306733728343457, 9.464667102622633e-05, 0.0002588510319284804, 0.0002339462613977719, 0.0003632282948120296, 0.0003610646796947369, 0.00022892173537582367, 0.000483695697572915, 0.0007996896666383144, 0.000588312012064217, 0.0003620922461571892, 0.0010086392562382545, 0.0011321391758229533, 0.0005767527003647866, 0.0007682132784131285, 0.001454473764922969, 0.0011769815164255563, 0.0010878132048422534, 0.001286737797682909, 0.0016094869009476995, 0.0013225356444876305, 0.0015421496256351704, 0.0014916346774997624, 0.0013471825015428822, 0.0020385297967883036, 0.0016275731013925508, 0.0012789241817354308, 0.0018048725578071667, 0.0024203578372562254, 0.0012706528210138957, 0.0009322240481488403, 0.002442690880448422, 0.0022155278541774502, 0.00047475775832345364, 0.0016903454879999133, 0.002518277557761454, 0.001644404061961063, 0.0004617038916728537, 0.0019538716255401148, 0.002086786832608339, 0.0007795076140448896, 0.0010146722154862273, 0.0018209088802189786, 0.001374209364443931, 0.0009971017971511173, 0.0011134066783060818, 0.001349422259391804, 0.000927289606016912, 0.0010258232649403023, 0.0008587682911164034, 0.0007252330998515628, 0.0009974785040890097, 0.0008067659685369932, 0.000420177933076257, 0.0007505189840565606, 0.0008586122033946466, 0.00043989030765506865, 0.00027747712318487933, 0.0006084194403643302, 0.0004974437463408294, 0.0001836175288987842, 0.0002714052407555212, 0.0003603694323371815, 0.0002756948967166475, 0.0003844350428781162, 0.00023333683364363248, 0.00015821558774311797, 0.0003770314788192234, 0.00030539242108539787, 0.0002391921386994129, 0.0002617974531403849, 0.000267517327590366, 0.0003417206398689104, 0.0004849370613616278, 0.00029719715747085354, 0.00018473610091390415, 0.0004939265083600179, 0.0004919008845386966, 0.00012854808613114757, 0.000357890381876889, 0.0005639252546328245, 0.0003782641119538294, 0.0003195212873138845, 0.0004110327581277071, 0.0004442732485006544, 0.0003846409983817273, 0.0004158731870077155, 0.000313480420166115, 0.0003362812363323984, 0.0005270092894168034, 0.0003475786904856702, 0.00016056092371741803, 0.0004293950256347969, 0.0004365069541915723, 0.00017450671277169288, 0.00018244185350286602, 0.00035339642929861496, 0.00030500068355394005, 0.00013427129894584086, 0.000194232053361818, 0.00022703214823361354, 0.0001156623356639391, 0.00010185526940716096, 0.00011602898844613905, 6.394489612827828e-05, 8.019223383235105e-05, 0.00012561896548175466, 6.72429736831629e-05, 0.00019429830629901564, 0.00030522121059636684, 0.00023170948737298615, 0.00011658042946148578, 0.00041849055122684405, 0.00043013840164168296, 0.00025709809921148493, 0.0003343774817142603, 0.0005622868407301842, 0.0003922977150476535, 0.0005328122151527719, 0.00045528951307141884, 0.0005033073883795733, 0.0006157970328559096, 0.0006775747676360994, 0.0003498245674385527, 0.00043170161341990617, 0.0007839375935371298, 0.0005894157862960392, 9.535787018835947e-05, 0.0006301283906922141, 0.0007193177624861028, 0.0003352800280091215, 0.00043921790734088753, 0.0004809200920346394, 0.000342884752405197, 0.0006728824850140274, 0.0005584097506109477, 0.00016566498164576496, 0.0006233918237222895, 0.0007463550201659251, 0.0005728382311646405, 0.0008212655079706209, 0.0005565644329807959, 0.0006449733091158223, 0.0013460680467989891, 0.0011501561102732843, 0.000101819002989375, 0.0013742260987756457, 0.0018185144492487942, 0.0009562128608288579, 0.0008388146867194286, 0.0019204188262833377, 0.0017068141449855365, 0.0016141542644839669, 0.0014167482374726121, 0.0018153893459352125, 0.0017535450818828952, 0.0024294692042524844, 0.0013331681350919273, 0.0011137226602672612, 0.0027669357949279337, 0.0026678001030827157, 0.0005809746759394237, 0.00204790931104762]
fft_list
sampling_frequency = 200

# print(unbalance4(fft_list,200,1200,90,'unsatisfactory'))


# Considering
# fft_listX=horizontal
# fft_listY=vertical
# fft_listZ=axial

import numpy as np
import matplotlib.pyplot as plt
def unbalance5(fft_listX,fft_listY,fft_listZ,sampling_frequency,rpm,angle,Vel_severity):
	N = sampling_frequency
	T = 1/N
	rpm = rpm//60               #to frequency
	limit_start1=int(0.8*rpm)            #CHANGE WITH RESPECT TO WINDOW BASED ON LOAD.
	limit_end1=int(1.2*(rpm))
	vel_severityis = Vel_severity
	averaged_fftX = fft_listX
	averaged_fftY = fft_listY
	averaged_fftZ = fft_listZ

	start_angle=int(90-30)
	end_angle=int(90+30)

	yf_X=abs(np.array(averaged_fftX)[0:N // 2])
	xf_X = np.linspace(0.0, 1.0 / (2.0 * T), N // 2)
	yf_Y=abs(np.array(averaged_fftY)[0:N // 2])
	xf_Y = np.linspace(0.0, 1.0 / (2.0 * T), N // 2)
	yf_Z=abs(np.array(averaged_fftZ)[0:N // 2])
	xf_Z = np.linspace(0.0, 1.0 / (2.0 * T), N // 2)

	rms_fft_amplitude_X = np.sqrt(np.mean(np.square(yf_X)))
	above_rms_ampl_X = [list(yf_X).index(i) for i in yf_X if i>rms_fft_amplitude_X]
	above_rms_ampl_X_values = [i for i in yf_X if i>rms_fft_amplitude_X]
	frequencycorrestoaboveamp_X = [list(xf_X)[j] for j in above_rms_ampl_X]

	rms_fft_amplitude_Y = np.sqrt(np.mean(np.square(yf_Y)))
	above_rms_ampl_Y = [list(yf_Y).index(i) for i in yf_Y if i>rms_fft_amplitude_Y]
	above_rms_ampl_Y_values = [i for i in yf_Y if i>rms_fft_amplitude_Y]
	frequencycorrestoaboveamp_Y = [list(xf_Y)[j] for j in above_rms_ampl_Y]

	rms_fft_amplitude_Z = np.sqrt(np.mean(np.square(yf_Z)))
	above_rms_ampl_Z = [list(yf_Z).index(i) for i in yf_Z if i>rms_fft_amplitude_Z]
	above_rms_ampl_Z_values = [i for i in yf_Z if i>rms_fft_amplitude_Z]
	frequencycorrestoaboveamp_Z = [list(xf_Z)[j] for j in above_rms_ampl_Z]


	if vel_severityis == 'unsatisfactory' or vel_severityis == 'unacceptable':
		if  start_angle<= angle <=end_angle:
			onexrangevaluesFreq_X = [i for i in frequencycorrestoaboveamp_X if limit_start1<= i <=limit_end1]
			onexrangevaluesFreq_Y = [i for i in frequencycorrestoaboveamp_Y if limit_start1<= i <=limit_end1]
			onexrangevaluesFreq_Z = [i for i in frequencycorrestoaboveamp_Z if limit_start1<= i <=limit_end1]
			
			oneXrangeAmplitude_X_index = [frequencycorrestoaboveamp_X.index(i) for i in onexrangevaluesFreq_X]
			oneXrangeAmplitude_X1 = [above_rms_ampl_X_values[i] for i in oneXrangeAmplitude_X_index]
			oneXrangeAmplitude_Y_index = [frequencycorrestoaboveamp_Y.index(i) for i in onexrangevaluesFreq_Y]
			oneXrangeAmplitude_Y1 = [above_rms_ampl_Y_values[i] for i in oneXrangeAmplitude_Y_index]
			oneXrangeAmplitude_Z_index = [frequencycorrestoaboveamp_Z.index(i) for i in onexrangevaluesFreq_Z]
			oneXrangeAmplitude_Z1 = [above_rms_ampl_Z_values[i] for i in oneXrangeAmplitude_Z_index]

			compareXand_Z = list(set([i for i in oneXrangeAmplitude_X1 for j in oneXrangeAmplitude_Z1 if i>j]))
			compareYand_Z = list(set([i for i in oneXrangeAmplitude_Y1 for j in oneXrangeAmplitude_Z1 if i>j]))
			

			if onexrangevaluesFreq_X == [] and onexrangevaluesFreq_Y == [] and onexrangevaluesFreq_Z==[]:
				print('check for other faults')
			else:
				onexrpmvalue_X = float(np.mean(onexrangevaluesFreq_X))
				onexrpmvalue_Y = float(np.mean(onexrangevaluesFreq_Y))
				onexrpmvalue_Z = float(np.mean(onexrangevaluesFreq_Z))


			multi1xvalues_X = [i for i in frequencycorrestoaboveamp_X if ((onexrpmvalue_X*2)-2)<= i <= ((onexrpmvalue_X*2)+2) or ((onexrpmvalue_X*3)-2)<= i <= ((onexrpmvalue_X*3)+2)]
			multi1xvalues_Y = [i for i in frequencycorrestoaboveamp_Y if ((onexrpmvalue_Y*2)-2)<= i <= ((onexrpmvalue_Y*2)+2) or ((onexrpmvalue_Y*3)-2)<= i <= ((onexrpmvalue_Y*3)+2)]
			multi1xvalues_Z = [i for i in frequencycorrestoaboveamp_Z if ((onexrpmvalue_Z*2)-2)<= i <= ((onexrpmvalue_Z*2)+2) or ((onexrpmvalue_Z*3)-2)<= i <= ((onexrpmvalue_Z*3)+2)]
			
			if multi1xvalues_X == [] and multi1xvalues_Y==[]:
				if compareXand_Z!=[] and compareYand_Z!=[]:
					print('Unbalance')
				else:
					print('Misalignment')
				


			
			else:
				print('Check for misalignment')
		else:	
			print('Check for other')
	else:
		print('check other')	

horizonta_x = [(1.3322676295501878e-15+0j), (4.695864832374477-1.2056628652294137j), (-1.4381420745675646+1.4538677091049417j), (-0.4448063657072793+1.2916356570841439j), (1.4080341852424119-0.019608232164602724j), (0.30179767213176256-0.1496996198293682j), (-0.6188781691694756+2.1178880631818155j), (0.6876365410607438-0.3221004796763154j), (1.2512131641612843+0.0830485979573091j), (2.1062962181093816-0.4473231741964966j), (0.3773381555614178+0.8828827047797597j), (0.308573129451428+0.2286154572943252j), (-0.16853885161996485-0.20432615868807652j), (0.7081951480222208+1.2735738140610822j), (0.0004236079322309516-1.1115640206405355j), (-0.40667021890340155-1.1755582564281144j), (0.3189306795379614+0.36153572998855j), (0.09833165177266123-0.15000934756781958j), (2.7750258369736716+3.02851899155821j), (0.5301509718785182+1.403706843134688j), (0.5829353952877896-1.7771692515663995j), (-1.4042008742939898+0.3446279983123005j), (1.064239049005049-1.387888451004087j), (-0.9165282291039383+0.04870932100998075j), (0.26831482323671446+0.3795336430189197j), (-0.6780580902004073+0.48406975969037325j), (1.2939816436803553+0.37165616538130564j), (-0.23934551091065237+0.15509937426131093j), (-1.581073263444912-2.3863504247169214j), (0.8675500206940934-4.036362422742054j), (-0.7404687717514946+0.22613328937313004j), (-1.4122362969057078-1.6603274159097723j), (-0.6446348234581697+0.07700711686027283j), (0.6996065402903058-1.7023534892660446j), (-1.9831756247776295+0.39011897751721203j), (0.48903923015762873+4.308792596357517j), (2.604456809554205+0.48416275737843684j), (-2.451242352285635+2.180239950388544j), (-0.16064989897106685+1.5054667387790661j), (0.06581355606431258+0.21681881622667598j), (1.4909130949399907+0.6062095930086547j), (-0.30745798005904335+0.12320019017596867j), (0.3749643960235316-1.1683486328817192j), (0.4411717254463883+0.7755826159611285j), (-1.3266103174401263-1.2257320528682492j), (-0.4619856653797074-0.09690320767530058j), (-1.5507506765053822+0.2999140129466924j), (-0.5587760023440451-0.2878344745102921j), (1.2274151407067497-0.4021342502544345j), (1.1660412821506223-1.1452413796522511j), (0.9479208210154144-0.25034536073091385j), (0.35457476538457783+2.4926033454514953j), (1.6502728218910532-0.9716634153127146j), (-0.33651949138243875+3.1350052635929204j), (-3.6541020160729403-2.1009393794663853j), (3.0558921930974656-4.055423078504884j), (2.0135701078674297-1.401061783230888j), (1.2473662029233132-2.9743051942125356j), (-0.10914042724611298+0.8989609705822145j), (3.6862247342242616+1.1152956030379295j), (5.655983797964887+0.45767203835363635j), (0.017427694289556817+3.430348392989687j), (1.4989542541361258-7.775208746323708j), (0.8252067892819541-7.9587056140403245j), (-11.55800457808376+4.656095703572042j), (5.832993359124106-2.52238087361539j), (4.016190827274738+3.258835040190151j), (-4.256266826720069-7.442011956001592j), (0.20431644357676626-3.2619851426064708j), (1.2048017521347574-1.2453604512238137j), (1.319600199794476-0.49323106849655274j), (3.99137327141393+1.122067818349254j), (0.8747600813117161-3.1786912322303604j), (1.5102509616696542+2.770333972745665j), (-0.5717007029384601-0.1789404624229658j), (-0.2948291080286325+1.5194024873171101j), (-0.8967489712202215-1.1184161420719931j), (2.255058137137758-2.0254133954474867j), (-3.3142719313237743+4.524716865829721j), (1.599742263217991+0.09429801275181154j), (-0.13270427657132533+1.5697840193101151j), (1.4277088892332184-0.8966539311153706j), (-1.2280865288458649+2.3576392849410914j), (-1.0160593727410105+0.16892255642691056j), (-1.4967220305791784+3.6068512775598713j), (2.547328853076983+2.1911554996687466j), (0.662615260404653+4.614571491505253j), (-2.1121483948783917+0.12130745257833775j), (-1.2282359601331607+1.2987869593117236j), (1.283794398454147-0.28221254729241363j), (-1.0169502489064466-0.14619225641413092j), (-4.828352425712167-3.1025874905979043j), (-1.0892764417518654-0.3411499005349883j), (0.9962198761195536+5.83978863947129j), (-2.956846655874886+2.3061239734304784j), (-4.606741126280503+2.6640931576664775j), (2.0023652913140864+3.6925806022943144j), (-1.0999471210459877-0.8622041295182361j), (-3.8153990975204284-0.18042733988016713j), (4.790635082702065+1.8156553041271j), (-2.695855612983868+0.8595990941744489j), (0.4749432088740633-0.8195936677044421j), (0.7473457389261067-1.0474947071617713j), (0.3640320505069291-0.06669597823593865j), (-0.22452260404448054+2.249997923801012j), (-0.49735004077383804+0.16206291895417324j), (-0.2641996420369597-1.5679886601060704j), (2.125998978624119-0.25639407090989225j), (-0.36275868122762545+0.4133304194551809j), (1.3825926750362494+0.9658302026721779j), (0.18700681373706018-0.9519138375487503j), (-0.16599728809413894+0.5621253429253791j), (-0.251281193899051+3.7174635192493075j), (-3.1834963529408564+1.8911571254639097j), (-2.13203798540165+1.0339270244831396j), (-0.6288674533028114-0.8232935515306217j), (2.750811548782344+0.27683852109837437j), (1.8284953306995142-4.236342522813594j), (-1.423375551392597+1.5535690093840853j), (-1.03100703206381-1.157441419817022j), (-0.5608061679470773+6.041913481735527j), (1.885984256224386+3.7045017654516452j), (-0.7746160679811426+1.264685026911471j), (-2.447399335191883-5.89274578078758j), (-0.3204983235593649+5.783909931854688j), (7.674019177378239+8.554263139698996j), (2.3702967806387125-2.100282346330257j), (-1.002100743793663+4.237305440613457j), (-1.7212659916579793+0j), (-1.002100743793663-4.237305440613457j), (2.3702967806387125+2.100282346330257j), (7.674019177378239-8.554263139698996j), (-0.3204983235593649-5.783909931854688j), (-2.447399335191883+5.89274578078758j), (-0.7746160679811426-1.264685026911471j), (1.885984256224386-3.7045017654516452j), (-0.5608061679470773-6.041913481735527j), (-1.03100703206381+1.157441419817022j), (-1.423375551392597-1.5535690093840853j), (1.8284953306995142+4.236342522813594j), (2.750811548782344-0.27683852109837437j), (-0.6288674533028114+0.8232935515306217j), (-2.13203798540165-1.0339270244831396j), (-3.1834963529408564-1.8911571254639097j), (-0.251281193899051-3.7174635192493075j), (-0.16599728809413894-0.5621253429253791j), (0.18700681373706018+0.9519138375487503j), (1.3825926750362494-0.9658302026721779j), (-0.36275868122762545-0.4133304194551809j), (2.125998978624119+0.25639407090989225j), (-0.2641996420369597+1.5679886601060704j), (-0.49735004077383804-0.16206291895417324j), (-0.22452260404448054-2.249997923801012j), (0.3640320505069291+0.06669597823593865j), (0.7473457389261067+1.0474947071617713j), (0.4749432088740633+0.8195936677044421j), (-2.695855612983868-0.8595990941744489j), (4.790635082702065-1.8156553041271j), (-3.8153990975204284+0.18042733988016713j), (-1.0999471210459877+0.8622041295182361j), (2.0023652913140864-3.6925806022943144j), (-4.606741126280503-2.6640931576664775j), (-2.956846655874886-2.3061239734304784j), (0.9962198761195536-5.83978863947129j), (-1.0892764417518654+0.3411499005349883j), (-4.828352425712167+3.1025874905979043j), (-1.0169502489064466+0.14619225641413092j), (1.283794398454147+0.28221254729241363j), (-1.2282359601331607-1.2987869593117236j), (-2.1121483948783917-0.12130745257833775j), (0.662615260404653-4.614571491505253j), (2.547328853076983-2.1911554996687466j), (-1.4967220305791784-3.6068512775598713j), (-1.0160593727410105-0.16892255642691056j), (-1.2280865288458649-2.3576392849410914j), (1.4277088892332184+0.8966539311153706j), (-0.13270427657132533-1.5697840193101151j), (1.599742263217991-0.09429801275181154j), (-3.3142719313237743-4.524716865829721j), (2.255058137137758+2.0254133954474867j), (-0.8967489712202215+1.1184161420719931j), (-0.2948291080286325-1.5194024873171101j), (-0.5717007029384601+0.1789404624229658j), (1.5102509616696542-2.770333972745665j), (0.8747600813117161+3.1786912322303604j), (3.99137327141393-1.122067818349254j), (1.319600199794476+0.49323106849655274j), (1.2048017521347574+1.2453604512238137j), (0.20431644357676626+3.2619851426064708j), (-4.256266826720069+7.442011956001592j), (4.016190827274738-3.258835040190151j), (5.832993359124106+2.52238087361539j), (-11.55800457808376-4.656095703572042j), (0.8252067892819541+7.9587056140403245j), (1.4989542541361258+7.775208746323708j), (0.017427694289556817-3.430348392989687j), (5.655983797964887-0.45767203835363635j), (3.6862247342242616-1.1152956030379295j), (-0.10914042724611298-0.8989609705822145j), (1.2473662029233132+2.9743051942125356j), (2.0135701078674297+1.401061783230888j), (3.0558921930974656+4.055423078504884j), (-3.6541020160729403+2.1009393794663853j), (-0.33651949138243875-3.1350052635929204j), (1.6502728218910532+0.9716634153127146j), (0.35457476538457783-2.4926033454514953j), (0.9479208210154144+0.25034536073091385j), (1.1660412821506223+1.1452413796522511j), (1.2274151407067497+0.4021342502544345j), (-0.5587760023440451+0.2878344745102921j), (-1.5507506765053822-0.2999140129466924j), (-0.4619856653797074+0.09690320767530058j), (-1.3266103174401263+1.2257320528682492j), (0.4411717254463883-0.7755826159611285j), (0.3749643960235316+1.1683486328817192j), (-0.30745798005904335-0.12320019017596867j), (1.4909130949399907-0.6062095930086547j), (0.06581355606431258-0.21681881622667598j), (-0.16064989897106685-1.5054667387790661j), (-2.451242352285635-2.180239950388544j), (2.604456809554205-0.48416275737843684j), (0.48903923015762873-4.308792596357517j), (-1.9831756247776295-0.39011897751721203j), (0.6996065402903058+1.7023534892660446j), (-0.6446348234581697-0.07700711686027283j), (-1.4122362969057078+1.6603274159097723j), (-0.7404687717514946-0.22613328937313004j), (0.8675500206940934+4.036362422742054j), (-1.581073263444912+2.3863504247169214j), (-0.23934551091065237-0.15509937426131093j), (1.2939816436803553-0.37165616538130564j), (-0.6780580902004073-0.48406975969037325j), (0.26831482323671446-0.3795336430189197j), (-0.9165282291039383-0.04870932100998075j), (1.064239049005049+1.387888451004087j), (-1.4042008742939898-0.3446279983123005j), (0.5829353952877896+1.7771692515663995j), (0.5301509718785182-1.403706843134688j), (2.7750258369736716-3.02851899155821j), (0.09833165177266123+0.15000934756781958j), (0.3189306795379614-0.36153572998855j), (-0.40667021890340155+1.1755582564281144j), (0.0004236079322309516+1.1115640206405355j), (0.7081951480222208-1.2735738140610822j), (-0.16853885161996485+0.20432615868807652j), (0.308573129451428-0.2286154572943252j), (0.3773381555614178-0.8828827047797597j), (2.1062962181093816+0.4473231741964966j), (1.2512131641612843-0.0830485979573091j), (0.6876365410607438+0.3221004796763154j), (-0.6188781691694756-2.1178880631818155j), (0.30179767213176256+0.1496996198293682j), (1.4080341852424119+0.019608232164602724j), (-0.4448063657072793-1.2916356570841439j), (-1.4381420745675646-1.4538677091049417j), (4.695864832374477+1.2056628652294137j)]
VerticaaY = [(-1.8735013540549517e-15+0j), (-0.33710468165661944-0.3398231452184911j), (-0.17917172999249656-0.23512483098056175j), (-0.02214564655717921+0.11254661011802178j), (-0.18539231283623786+0.16029323708031085j), (-0.6427575368161198-0.240098352837453j), (-0.6571053522338095-0.16336889299220245j), (0.12308393900970094+0.5416078416007388j), (0.056312934377436424+0.5830194227402081j), (-0.6656127299474096+0.20807450657089877j), (-0.2236955654276167-0.5785800005864388j), (-0.2025910613560568-0.3503800144530999j), (-0.734128174090082+0.2289809267742423j), (-0.5202398449028811+0.18575741819947017j), (-0.38928681416799393-0.0038804992048091166j), (-0.3158079001761961+0.21793202418084343j), (-0.32541656365273486-0.4066410283699118j), (0.33390310910954224-0.1465128474985261j), (-0.9880974941392626+0.09851228977031035j), (0.5095972021106618-0.22096999452241872j), (0.23411789386422255+0.5965673802897431j), (-0.08558450564152564+0.20683591489503772j), (0.9523650030494877+0.4342058106060796j), (0.4547177242336522-0.29087007182863833j), (-0.16383355324428783-0.058026478793708064j), (0.7589668347371548-0.1296454011632726j), (-0.3320917508648132-0.03527448667847083j), (1.0667474354909983+0.30263569286114256j), (1.2926270828950566+0.694000449669093j), (-0.27052093705036845+1.0187995986198932j), (-0.1664454428270094+0.7985508385590159j), (1.3428603895929112+0.48200423545641324j), (-0.7205872491375865+0.3177656868496964j), (-0.04150853655734926+1.5624427718504679j), (0.1697829443914694-0.31422137912087705j), (-0.14388236003126847-0.7939349397417048j), (-0.5140316901667179-0.16191128212359737j), (0.42179288771715623-0.9060340265463949j), (-0.3513704168560234-0.3043353055423661j), (-0.29068503030148246-0.5410712164022072j), (-0.05964753128772675+0.3247610090844912j), (0.3710025824874306+0.14222155948912893j), (0.07573023461191114+0.456118226021924j), (0.1473615668141457-1.2975377244225095j), (-0.3031758884778975+0.37784379080735064j), (-0.10010867055414935-0.7317802556359021j), (0.6520236384554212+0.36713759991889366j), (0.2013512197445637-0.08539148929790186j), (0.13837379717974746+0.05668752328753793j), (-0.6637002632805662-0.19096042158202467j), (0.07935808884290399+0.42878524475803753j), (0.9426741463331528-0.8470472434512815j), (-0.2192017601247589+0.058236689719361745j), (0.31210960613960737-0.4668261369778974j), (1.0737093875316885+0.674324089588706j), (-1.0773742256435384+1.0619985136763357j), (-0.032433705368736174-0.5665574979321999j), (-0.7304136004190749+0.38370969880201955j), (-0.12601472742047817+0.19736977531114538j), (-0.1859580295624736+0.7751932618059454j), (-1.601294323899983+0.8631574973569339j), (-0.4467488425526839-1.2303538125718758j), (0.23976340259640505+1.6542954795907348j), (0.26843733789930113+1.8497800486197558j), (1.4495343987798224+0.5339861090326778j), (2.45610874079171+2.1794641359756683j), (-1.0833047714674942-0.1744796581858834j), (-0.2422063248792623+2.0161583709972364j), (1.8363971293647903+0.5022303454899294j), (0.06245514035827343+1.386129035313735j), (-0.501244383713169+1.2701152367552873j), (-1.4287170978049724-0.46328200323488844j), (-0.46874098735633435+1.9256317027578218j), (-0.17478208079169272-0.3568445845582955j), (-0.320999382760533-0.23143240384511066j), (0.026562737278450543-0.18042414684232386j), (0.3626518074467208+0.47043765805938276j), (-0.05932847282829634-0.4746734497221085j), (0.907867594884132-0.8727237650161193j), (-0.27795985607889817+0.6942289087581066j), (0.273431951715433-0.3827798867791113j), (-0.6417512423201408-0.05146751893626131j), (-0.608051183952759+0.5081034624526475j), (-0.2151346703920689+1.1675845022247113j), (0.025718331953179296-0.14578910099806996j), (-0.7321800072507396+0.2859597729919811j), (-0.03413742342270362-0.9405292980956055j), (0.0661787320432359+0.835660832093581j), (-0.06180214088472029-0.725526021910574j), (-0.23251265757931452-0.757837956383266j), (-0.8265702212858634+0.18298205360123745j), (-0.08156284073258431+1.4954019043024633j), (0.1705837742304498-0.5549572226669471j), (-0.7167950949799816-1.0943953983350008j), (-0.7824554404333003+0.5296286441872613j), (0.478931929046246-0.4763265539568209j), (0.5038265789237936-0.9089894902000344j), (-0.6041887024950723-0.4797639760337782j), (-0.0175327756134305-1.147076751393819j), (-1.6590046211755134-1.0017778661658359j), (0.33735329781610035+0.8496212620550719j), (-0.3405267801413967+0.02289853156783611j), (-0.14973962047864825-0.06665417571664528j), (0.46895184418660785+0.03646455213502808j), (-0.5304370432450366-0.5239076997895472j), (0.5688268237506873+0.03746542328927138j), (0.4888436555592835+0.08040638639007083j), (-0.44253466374219186+0.05925884704514779j), (0.4709967159520633+0.0659776485164504j), (0.10513102032224175+0.39605369946635305j), (0.007309903567733048-0.015815195517705327j), (0.25589526648670424-0.11564239755596487j), (-0.5144783967637818-0.29324061870789736j), (0.16452434258527976+0.03391836811567733j), (1.150179595911992+0.016981212969580134j), (-0.4074322150119712+0.15763849523119938j), (-0.8395296657109201-0.4160328966581994j), (-0.4156440465377916-0.7438044242031439j), (0.27185528285174937-0.1773338366296422j), (0.036925045490950215-0.17460131354146693j), (1.3276824125604825-1.027435571644466j), (0.30386274832386784-0.785974486661543j), (-0.94486517738048+0.5727887750968748j), (-0.5238666620966699+1.662362446725612j), (-1.825468009613832-1.7070624284973024j), (-0.35389542296467047-2.0584339693444607j), (-1.3347602499869835+1.1723614772940927j), (-0.3012253423654445+1.2135094929311407j), (-0.3747682745600216+0j), (-0.3012253423654445-1.2135094929311407j), (-1.3347602499869835-1.1723614772940927j), (-0.35389542296467047+2.0584339693444607j), (-1.825468009613832+1.7070624284973024j), (-0.5238666620966699-1.662362446725612j), (-0.94486517738048-0.5727887750968748j), (0.30386274832386784+0.785974486661543j), (1.3276824125604825+1.027435571644466j), (0.036925045490950215+0.17460131354146693j), (0.27185528285174937+0.1773338366296422j), (-0.4156440465377916+0.7438044242031439j), (-0.8395296657109201+0.4160328966581994j), (-0.4074322150119712-0.15763849523119938j), (1.150179595911992-0.016981212969580134j), (0.16452434258527976-0.03391836811567733j), (-0.5144783967637818+0.29324061870789736j), (0.25589526648670424+0.11564239755596487j), (0.007309903567733048+0.015815195517705327j), (0.10513102032224175-0.39605369946635305j), (0.4709967159520633-0.0659776485164504j), (-0.44253466374219186-0.05925884704514779j), (0.4888436555592835-0.08040638639007083j), (0.5688268237506873-0.03746542328927138j), (-0.5304370432450366+0.5239076997895472j), (0.46895184418660785-0.03646455213502808j), (-0.14973962047864825+0.06665417571664528j), (-0.3405267801413967-0.02289853156783611j), (0.33735329781610035-0.8496212620550719j), (-1.6590046211755134+1.0017778661658359j), (-0.0175327756134305+1.147076751393819j), (-0.6041887024950723+0.4797639760337782j), (0.5038265789237936+0.9089894902000344j), (0.478931929046246+0.4763265539568209j), (-0.7824554404333003-0.5296286441872613j), (-0.7167950949799816+1.0943953983350008j), (0.1705837742304498+0.5549572226669471j), (-0.08156284073258431-1.4954019043024633j), (-0.8265702212858634-0.18298205360123745j), (-0.23251265757931452+0.757837956383266j), (-0.06180214088472029+0.725526021910574j), (0.0661787320432359-0.835660832093581j), (-0.03413742342270362+0.9405292980956055j), (-0.7321800072507396-0.2859597729919811j), (0.025718331953179296+0.14578910099806996j), (-0.2151346703920689-1.1675845022247113j), (-0.608051183952759-0.5081034624526475j), (-0.6417512423201408+0.05146751893626131j), (0.273431951715433+0.3827798867791113j), (-0.27795985607889817-0.6942289087581066j), (0.907867594884132+0.8727237650161193j), (-0.05932847282829634+0.4746734497221085j), (0.3626518074467208-0.47043765805938276j), (0.026562737278450543+0.18042414684232386j), (-0.320999382760533+0.23143240384511066j), (-0.17478208079169272+0.3568445845582955j), (-0.46874098735633435-1.9256317027578218j), (-1.4287170978049724+0.46328200323488844j), (-0.501244383713169-1.2701152367552873j), (0.06245514035827343-1.386129035313735j), (1.8363971293647903-0.5022303454899294j), (-0.2422063248792623-2.0161583709972364j), (-1.0833047714674942+0.1744796581858834j), (2.45610874079171-2.1794641359756683j), (1.4495343987798224-0.5339861090326778j), (0.26843733789930113-1.8497800486197558j), (0.23976340259640505-1.6542954795907348j), (-0.4467488425526839+1.2303538125718758j), (-1.601294323899983-0.8631574973569339j), (-0.1859580295624736-0.7751932618059454j), (-0.12601472742047817-0.19736977531114538j), (-0.7304136004190749-0.38370969880201955j), (-0.032433705368736174+0.5665574979321999j), (-1.0773742256435384-1.0619985136763357j), (1.0737093875316885-0.674324089588706j), (0.31210960613960737+0.4668261369778974j), (-0.2192017601247589-0.058236689719361745j), (0.9426741463331528+0.8470472434512815j), (0.07935808884290399-0.42878524475803753j), (-0.6637002632805662+0.19096042158202467j), (0.13837379717974746-0.05668752328753793j), (0.2013512197445637+0.08539148929790186j), (0.6520236384554212-0.36713759991889366j), (-0.10010867055414935+0.7317802556359021j), (-0.3031758884778975-0.37784379080735064j), (0.1473615668141457+1.2975377244225095j), (0.07573023461191114-0.456118226021924j), (0.3710025824874306-0.14222155948912893j), (-0.05964753128772675-0.3247610090844912j), (-0.29068503030148246+0.5410712164022072j), (-0.3513704168560234+0.3043353055423661j), (0.42179288771715623+0.9060340265463949j), (-0.5140316901667179+0.16191128212359737j), (-0.14388236003126847+0.7939349397417048j), (0.1697829443914694+0.31422137912087705j), (-0.04150853655734926-1.5624427718504679j), (-0.7205872491375865-0.3177656868496964j), (1.3428603895929112-0.48200423545641324j), (-0.1664454428270094-0.7985508385590159j), (-0.27052093705036845-1.0187995986198932j), (1.2926270828950566-0.694000449669093j), (1.0667474354909983-0.30263569286114256j), (-0.3320917508648132+0.03527448667847083j), (0.7589668347371548+0.1296454011632726j), (-0.16383355324428783+0.058026478793708064j), (0.4547177242336522+0.29087007182863833j), (0.9523650030494877-0.4342058106060796j), (-0.08558450564152564-0.20683591489503772j), (0.23411789386422255-0.5965673802897431j), (0.5095972021106618+0.22096999452241872j), (-0.9880974941392626-0.09851228977031035j), (0.33390310910954224+0.1465128474985261j), (-0.32541656365273486+0.4066410283699118j), (-0.3158079001761961-0.21793202418084343j), (-0.38928681416799393+0.0038804992048091166j), (-0.5202398449028811-0.18575741819947017j), (-0.734128174090082-0.2289809267742423j), (-0.2025910613560568+0.3503800144530999j), (-0.2236955654276167+0.5785800005864388j), (-0.6656127299474096-0.20807450657089877j), (0.056312934377436424-0.5830194227402081j), (0.12308393900970094-0.5416078416007388j), (-0.6571053522338095+0.16336889299220245j), (-0.6427575368161198+0.240098352837453j), (-0.18539231283623786-0.16029323708031085j), (-0.02214564655717921-0.11254661011802178j), (-0.17917172999249656+0.23512483098056175j), (-0.33710468165661944+0.3398231452184911j)]
axial_z = [(6.777911565336581e-14+0j), (0.7961990104371974+0.37436263697950123j), (-3.1105082083048283+0.18026774475521906j), (0.49906488393441967-1.4541356564931844j), (0.1938251827410953+1.301241379703701j), (-0.3741181854906503-0.9607428756838863j), (0.5764528591245281-0.1805797978736099j), (0.5311770085554216-0.007468093808607079j), (-0.8656197951022464-1.1320220803634107j), (-0.34002133982529653-0.28443644420437325j), (-1.0681505120599297+0.1380336982444232j), (-0.27416391386734995+0.1665014677305343j), (0.46729924518336796+1.410245643424418j), (-0.2690481045822447+0.5549414412051861j), (-0.27081588954916114+0.5390078062745058j), (-0.4575828940894383-0.28607920762096695j), (0.4976035879313454+0.4592008694237668j), (0.022866210710803164-0.846395571055159j), (-1.583390426666658+0.2838566241254949j), (0.7179425685948402+0.36811483950055746j), (0.23643126209690696-0.47822102831480245j), (0.36603531315516236+1.6509683192701374j), (-0.28121995499971486+0.6677503455818163j), (-0.7583290215078429-0.3414813881997165j), (-0.9767988292763565+0.7650973934026479j), (-0.29020201515613603+0.46420680003006043j), (-0.7585439186852941+0.3638843792404768j), (-0.44506473141206065-0.5125471477475845j), (1.0808776398033826+2.3375480954639327j), (-1.1827688724964858-1.2554551336801487j), (0.296964192625734-2.260211772437191j), (-1.0403849372851837-2.4760898081972442j), (0.08893708952346596-1.1724966072764773j), (-0.9569281411585324+0.575911203995548j), (0.14244671517306046-0.34467098614651315j), (0.41827019735306864-0.30233261470100153j), (-0.3750650418685707+1.5334473028855573j), (2.001245567876604+0.7720547870494107j), (-0.5214664825864156-0.08582726566717569j), (0.571683967272288+1.0560701372346526j), (1.647024086861487+0.1624457132269656j), (0.5436861323238869+0.1572296157721933j), (1.007025398247196-0.2879791486741729j), (-0.7246171543403594+0.5465580659563319j), (0.5214410097509967+0.8334884581642114j), (-1.0659435983294725-0.21395451645247127j), (-1.668333969608805+0.21189422908284072j), (0.6615814746870459+1.6277217222010658j), (1.5578774216517608-3.581577323236367j), (-0.6679294919656037+0.7401193351056743j), (2.8942183710576916+0.011540667923137071j), (0.29782574240163684-0.32843822849800347j), (-0.791505534399332-1.6273082411907414j), (-0.4001927991716263+0.3168146389481593j), (-0.07128605767041885+1.0926049720441666j), (-0.13685787831772545-0.7010628040058526j), (1.2706467049347125-1.8982445325062136j), (-0.34047925026812265+1.1421148732594837j), (-0.029583192412086956+0.9211726586276842j), (0.43136306329341445+1.3387268965442942j), (0.9624390622535608+1.215542733094857j), (-1.5826218826210763-0.5478503570902991j), (2.6261345616039478-1.9898129242865938j), (0.42971479276943186+1.0614353537540544j), (1.258694522270051-1.5515183137739572j), (0.6661753158377879-1.2743607110155324j), (0.5011422278897115-1.6442130505315893j), (-0.4569703846460871+0.9459434232081627j), (-0.3705978061067861-0.3188170067330346j), (-0.78418274350123-2.4509373026448253j), (-0.1587520203228337-0.0997876340224998j), (-0.6284435085642743+0.23415978769574086j), (0.592481282384426+0.10341540368797786j), (0.17762960454649168-0.04179626800479519j), (0.960339241384793-1.1478067729712151j), (0.32159612578039654-0.8527002594708242j), (0.30693109090710513-0.5288725685163456j), (0.4456399625619143-0.9222352726183876j), (-0.1208159163196979+0.13030620911672203j), (-0.7613668508447118+0.5318464025272788j), (0.0896699024344707+1.7352139427067008j), (0.5544558202264471-1.281983436726617j), (0.6765015011373068-0.4298469589994883j), (0.7749492245481527-0.3069953792146379j), (-1.296784686701134+1.2550723940512856j), (0.7904664178416518+0.9548306264161242j), (-0.26877826035228525-0.6186947598546897j), (0.4640156719776992+0.07832911478904203j), (1.6720246561732788+0.9859810068812648j), (-0.3895557074526767-0.4274519784276139j), (-1.1811592527687267+0.7731975603354376j), (-1.3434089791319497+0.849101318871924j), (2.7967491006951146+0.7611219374330666j), (0.3148720387097673+0.22711855759333585j), (0.5305222794391329+0.30974197166645545j), (-0.510036953586502+0.22375819281333514j), (0.3613743182978857-0.2312641789473131j), (-0.10982513356212492+0.10253953365282353j), (-0.361546180551948+1.0532598047637278j), (-0.857676963699295+0.6468378369779355j), (1.0903528807147052-0.8827922438343216j), (-1.5066277661876537+0.36324942913832925j), (0.09105745046258817+1.4213646805896833j), (-1.018907962551237-0.8696190981602211j), (-0.37079333471469555-0.6517984736185118j), (1.6566672762600911-2.4473502337994857j), (-0.1795719849853562-0.9350529092637704j), (-0.3202692395762535+0.17100245941837444j), (0.7795484217085543-0.8916960855508649j), (0.6748891744883851-1.1055540513961402j), (2.2156040958275627+0.8543358398528076j), (-1.6586240696487213-0.216707151807575j), (2.3266999309688763-1.7695825587560865j), (0.48527507651410373+1.884163767980541j), (-1.13354777668519+2.3798038533859445j), (-1.5650981986950399-1.6787433163070302j), (1.8414032225821597+0.6769540135067603j), (0.5284518955937823+0.26821933719671875j), (0.4474315753412805-4.184910985808165j), (-0.2599599850848742-1.7929942410458877j), (-1.3220770501314507-0.20504572043427294j), (-2.236017206503581+0.9620311839903668j), (1.6409244461276677+1.284063909499146j), (0.3191047728890005+5.15465787289879j), (3.572964572584684-3.663689287118059j), (-1.6911768054315885-0.23406303844146026j), (1.38424230172877-1.7993181741785083j), (-2.137222684054639+0.7079815747819042j), (-0.624972469917449+0j), (-2.137222684054639-0.7079815747819042j), (1.38424230172877+1.7993181741785083j), (-1.6911768054315885+0.23406303844146026j), (3.572964572584684+3.663689287118059j), (0.3191047728890005-5.15465787289879j), (1.6409244461276677-1.284063909499146j), (-2.236017206503581-0.9620311839903668j), (-1.3220770501314507+0.20504572043427294j), (-0.2599599850848742+1.7929942410458877j), (0.4474315753412805+4.184910985808165j), (0.5284518955937823-0.26821933719671875j), (1.8414032225821597-0.6769540135067603j), (-1.5650981986950399+1.6787433163070302j), (-1.13354777668519-2.3798038533859445j), (0.48527507651410373-1.884163767980541j), (2.3266999309688763+1.7695825587560865j), (-1.6586240696487213+0.216707151807575j), (2.2156040958275627-0.8543358398528076j), (0.6748891744883851+1.1055540513961402j), (0.7795484217085543+0.8916960855508649j), (-0.3202692395762535-0.17100245941837444j), (-0.1795719849853562+0.9350529092637704j), (1.6566672762600911+2.4473502337994857j), (-0.37079333471469555+0.6517984736185118j), (-1.018907962551237+0.8696190981602211j), (0.09105745046258817-1.4213646805896833j), (-1.5066277661876537-0.36324942913832925j), (1.0903528807147052+0.8827922438343216j), (-0.857676963699295-0.6468378369779355j), (-0.361546180551948-1.0532598047637278j), (-0.10982513356212492-0.10253953365282353j), (0.3613743182978857+0.2312641789473131j), (-0.510036953586502-0.22375819281333514j), (0.5305222794391329-0.30974197166645545j), (0.3148720387097673-0.22711855759333585j), (2.7967491006951146-0.7611219374330666j), (-1.3434089791319497-0.849101318871924j), (-1.1811592527687267-0.7731975603354376j), (-0.3895557074526767+0.4274519784276139j), (1.6720246561732788-0.9859810068812648j), (0.4640156719776992-0.07832911478904203j), (-0.26877826035228525+0.6186947598546897j), (0.7904664178416518-0.9548306264161242j), (-1.296784686701134-1.2550723940512856j), (0.7749492245481527+0.3069953792146379j), (0.6765015011373068+0.4298469589994883j), (0.5544558202264471+1.281983436726617j), (0.0896699024344707-1.7352139427067008j), (-0.7613668508447118-0.5318464025272788j), (-0.1208159163196979-0.13030620911672203j), (0.4456399625619143+0.9222352726183876j), (0.30693109090710513+0.5288725685163456j), (0.32159612578039654+0.8527002594708242j), (0.960339241384793+1.1478067729712151j), (0.17762960454649168+0.04179626800479519j), (0.592481282384426-0.10341540368797786j), (-0.6284435085642743-0.23415978769574086j), (-0.1587520203228337+0.0997876340224998j), (-0.78418274350123+2.4509373026448253j), (-0.3705978061067861+0.3188170067330346j), (-0.4569703846460871-0.9459434232081627j), (0.5011422278897115+1.6442130505315893j), (0.6661753158377879+1.2743607110155324j), (1.258694522270051+1.5515183137739572j), (0.42971479276943186-1.0614353537540544j), (2.6261345616039478+1.9898129242865938j), (-1.5826218826210763+0.5478503570902991j), (0.9624390622535608-1.215542733094857j), (0.43136306329341445-1.3387268965442942j), (-0.029583192412086956-0.9211726586276842j), (-0.34047925026812265-1.1421148732594837j), (1.2706467049347125+1.8982445325062136j), (-0.13685787831772545+0.7010628040058526j), (-0.07128605767041885-1.0926049720441666j), (-0.4001927991716263-0.3168146389481593j), (-0.791505534399332+1.6273082411907414j), (0.29782574240163684+0.32843822849800347j), (2.8942183710576916-0.011540667923137071j), (-0.6679294919656037-0.7401193351056743j), (1.5578774216517608+3.581577323236367j), (0.6615814746870459-1.6277217222010658j), (-1.668333969608805-0.21189422908284072j), (-1.0659435983294725+0.21395451645247127j), (0.5214410097509967-0.8334884581642114j), (-0.7246171543403594-0.5465580659563319j), (1.007025398247196+0.2879791486741729j), (0.5436861323238869-0.1572296157721933j), (1.647024086861487-0.1624457132269656j), (0.571683967272288-1.0560701372346526j), (-0.5214664825864156+0.08582726566717569j), (2.001245567876604-0.7720547870494107j), (-0.3750650418685707-1.5334473028855573j), (0.41827019735306864+0.30233261470100153j), (0.14244671517306046+0.34467098614651315j), (-0.9569281411585324-0.575911203995548j), (0.08893708952346596+1.1724966072764773j), (-1.0403849372851837+2.4760898081972442j), (0.296964192625734+2.260211772437191j), (-1.1827688724964858+1.2554551336801487j), (1.0808776398033826-2.3375480954639327j), (-0.44506473141206065+0.5125471477475845j), (-0.7585439186852941-0.3638843792404768j), (-0.29020201515613603-0.46420680003006043j), (-0.9767988292763565-0.7650973934026479j), (-0.7583290215078429+0.3414813881997165j), (-0.28121995499971486-0.6677503455818163j), (0.36603531315516236-1.6509683192701374j), (0.23643126209690696+0.47822102831480245j), (0.7179425685948402-0.36811483950055746j), (-1.583390426666658-0.2838566241254949j), (0.022866210710803164+0.846395571055159j), (0.4976035879313454-0.4592008694237668j), (-0.4575828940894383+0.28607920762096695j), (-0.27081588954916114-0.5390078062745058j), (-0.2690481045822447-0.5549414412051861j), (0.46729924518336796-1.410245643424418j), (-0.27416391386734995-0.1665014677305343j), (-1.0681505120599297-0.1380336982444232j), (-0.34002133982529653+0.28443644420437325j), (-0.8656197951022464+1.1320220803634107j), (0.5311770085554216+0.007468093808607079j), (0.5764528591245281+0.1805797978736099j), (-0.3741181854906503+0.9607428756838863j), (0.1938251827410953-1.301241379703701j), (0.49906488393441967+1.4541356564931844j), (-3.1105082083048283-0.18026774475521906j), (0.7961990104371974-0.37436263697950123j)]

obj = unbalance5(horizonta_x,VerticaaY,axial_z,200,1200,90,'unsatisfactory')


